trigger:

- master

pool:
  vmImage: 'windows-latest'

steps:
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # PowerShell script for Invicti CI/CD integration
      
      # Variables
      $TARGET_ID = "2982b776-043d-47b8-bfdf-165e8668bb64"
      $SCAN_PROFILE_ID = "11111111-1111-1111-1111-111111111111"
      $REPORT_TEMPLATE_ID = "11111111-1111-1111-1111-111111111111"
      $API_TOKEN = "WkPzp9qVpH6mbIHh6X2_fwz6TUUc08TEg9zWXotxReI"
      $INCREMENTAL = $true
      
      # Conditions
      $STOP_SCAN_BEFORE_START = $false
      $FAIL_BUILD_ON_CONDITIONS = $false
      $FAIL_ON_SEVERITY = "3"
      $FAIL_ON_CONFIDENCE_FULL = $false
      $IGNORE_IF_STATUS_IGNORED = $false
      $IGNORE_IF_STATUS_FALSE_POSITIVE = $false
      
      # Settings
      $API_ENDPOINT = "https://platform.invicti.com/api/v1"
      $SCAN_TIME_LIMIT = 24 # hours
      $POLL_INTERVAL = 60 # seconds
      $MAX_POLL_ATTEMPTS = $SCAN_TIME_LIMIT * 60
      
      # Headers
      $headers = @{
          "Content-Type" = "application/json"
          "Accept" = "application/json"
          "X-Auth" = $API_TOKEN
      }
      
      # Request body
      $body = @{
          user_authorized_to_scan = "yes"
          target_id = $TARGET_ID
          profile_id = $SCAN_PROFILE_ID
          report_template_id = $REPORT_TEMPLATE_ID
          schedule = @{
              disable = $false
              start_date = $null
              time_sensitive = $false
          }
          incremental = $INCREMENTAL
      } | ConvertTo-Json
      
      function Contains {
          param (
              [Parameter(Mandatory=$true)]
              [string]$item,
              
              [Parameter(Mandatory=$true)]
              [array]$list
          )
          
          return $list -contains $item
      }
      
      function Check-Conditions {
          param (
              [Parameter(Mandatory=$true)]
              [string]$Response
          )
          
          $ResponseObj = $Response | ConvertFrom-Json
          
          if (-not $ResponseObj.vulnerabilities -or $ResponseObj.vulnerabilities.Count -eq 0) {
              Write-Host "No vulnerabilities found"
              exit 0
          }
          
          $EXIT_CODE = 0
          
          foreach ($VULN in $ResponseObj.vulnerabilities) {
              $SEVERITY = $VULN.severity
              $CONFIDENCE = $VULN.confidence
              $STATUS = $VULN.status
              
              # Check if severity is in the FAIL_ON_SEVERITY array
              $SEVERITY_FAIL = Contains -item $SEVERITY -list $FAIL_ON_SEVERITY
              
              # Check if confidence is 100 and FAIL_ON_CONFIDENCE_FULL is true
              $CONFIDENCE_FAIL = ($CONFIDENCE -eq 100) -and $FAIL_ON_CONFIDENCE_FULL
              
              # Apply status exclusions if applicable
              if ($SEVERITY_FAIL -or $CONFIDENCE_FAIL) {
                  # Check if we should ignore based on status
                  if (($STATUS -eq "ignored" -and $IGNORE_IF_STATUS_IGNORED) -or 
                      ($STATUS -eq "false_positive" -and $IGNORE_IF_STATUS_FALSE_POSITIVE)) {
                      continue
                  }
                  
                  # If we got here, we need to fail
                  Write-Host "Failed check: $($VULN.vt_name) (Severity: $SEVERITY, Confidence: $CONFIDENCE, Status: $STATUS)"
                  $EXIT_CODE = 1
              }
              
              # fail fast
              if ($EXIT_CODE -eq 1) {
                  break
              }
          }
          
          exit $EXIT_CODE
      }
      
      # Stop any running scans
      if ($STOP_SCAN_BEFORE_START) {
          Write-Host "Stopping any running scans on this target before starting a new one"
          
          # Get current scans
          $RESPONSE = Invoke-RestMethod -Uri "$API_ENDPOINT/scans?q=target=$TARGET_ID&scan_status=processing,queued,starting" -Headers $headers -Method Get
          $scan_ids = $RESPONSE | ForEach-Object { $_.scan_id }
          
          # Stop any running scans
          if ($scan_ids) {
              foreach ($scan_id in $scan_ids) {
                  Write-Host "Stopping scan $scan_id"
                  Invoke-RestMethod -Uri "$API_ENDPOINT/scans/$scan_id/abort" -Headers $headers -Method Post
              }
          }
      }
      
      # Start the scan
      Write-Host "Starting scan..."
      $RESPONSE = Invoke-RestMethod -Uri "$API_ENDPOINT/scans" -Headers $headers -Method Post -Body $body
      $SCAN_ID = $RESPONSE.scan_id
      
      # Poll for completion
      Write-Host "Polling for completion..."
      for ($i = 1; $i -le $MAX_POLL_ATTEMPTS; $i++) {
          $RESPONSE = Invoke-RestMethod -Uri "$API_ENDPOINT/scans/$SCAN_ID/results" -Headers $headers -Method Get
          $STATUS = $RESPONSE.status
          $RESULT_ID = $RESPONSE.result_id
          
          if ($STATUS -eq "completed") {
              Write-Host "Scan completed successfully"
              # Get scan results
              $RESPONSE = Invoke-RestMethod -Uri "$API_ENDPOINT/scans/$SCAN_ID/results/$RESULT_ID/vulnerabilities" -Headers $headers -Method Get
              
              # Fail upon certain conditions
              if ($FAIL_BUILD_ON_CONDITIONS) {
                  Check-Conditions -Response ($RESPONSE | ConvertTo-Json -Depth 10)
              }
              
              exit 0
          }
          elseif ($STATUS -eq "failed" -or $STATUS -eq "aborting") {
              Write-Host "Scan $STATUS"
              exit 1
          }
          
          Start-Sleep -Seconds $POLL_INTERVAL
      }
      
      Write-Host "Invicti CI/CD integration script done"