trigger:

- master

pool:
  vmImage: 'windows-latest'

steps:
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      #!/bin/bash
      set -e
      
      # Variables
      TARGET_ID="fda49124-ce6f-497c-b19c-6bac34ef9d3d"
      SCAN_PROFILE_ID="11111111-1111-1111-1111-111111111111"
      REPORT_TEMPLATE_ID="11111111-1111-1111-1111-111111111111"
      API_TOKEN="WkPzp9qVpH6mbIHh6X2_fwz6TUUc08TEg9zWXotxReI"
      INCREMENTAL="true"
      
      # Conditions (true/false)
      STOP_SCAN_BEFORE_START="false"
      FAIL_BUILD_ON_CONDITIONS="true"
      FAIL_ON_SEVERITY="3"
      FAIL_ON_CONFIDENCE_FULL="false"
      IGNORE_IF_STATUS_IGNORED="false"
      IGNORE_IF_STATUS_FALSE_POSITIVE="false"
      STOP_SCANING_IF_THE_BUILD_FAILS="true"
      FAIL_BUILD_BUT_AFTER_SCAN_HAS_COMPLATED="false"
      
      # Settings
      API_ENDPOINT="https://platform.invicti.com/api/v1"
      SCAN_TIME_LIMIT=24 # hours
      POLL_INTERVAL=60 # seconds
      MAX_POLL_ATTEMPTS=$(( (SCAN_TIME_LIMIT * 3600) / POLL_INTERVAL ))
      CANCEL_SCAN=0
      
      # Function to extract JSON values
      get_json_value() {
          local json="$1"
          local key="$2"
          echo "$json" | grep -o "\"$key\":[^,}]*" | cut -d':' -f2- | tr -d '"' | tr -d ' ' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//'
      }
      
      # Function to extract array elements
      get_json_array() {
          local json="$1"
          local key="$2"
          echo "$json" | sed -n "/\"$key\":\[/,/\]/p" | sed '1d;$d' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//'
      }
      
      # Headers for curl requests
      HEADER_CONTENT="Content-Type: application/json"
      HEADER_ACCEPT="Accept: application/json"
      HEADER_AUTH="X-Auth: $API_TOKEN"
      
      REPORT_TEMPLATE_LINE=""
      if [ -n "$REPORT_TEMPLATE_ID" ]; then
        REPORT_TEMPLATE_LINE="    \"report_template_id\": \"$REPORT_TEMPLATE_ID\","
      fi
      
      # Request body
      BODY=$(cat <<EOF
      {
          "user_authorized_to_scan": "yes",
          "target_id": "$TARGET_ID",
          "profile_id": "$SCAN_PROFILE_ID",    
      	$REPORT_TEMPLATE_LINE
          "schedule": {
              "disable": false,
              "start_date": null,
              "time_sensitive": false
          },
          "incremental": $INCREMENTAL
      }
      EOF
      )
      
      if [ -z "$REPORT_TEMPLATE_ID" ]; then
        BODY=$(echo "$BODY" | sed '/^[[:space:]]*$/d' | sed '4s/^,$//')
      fi
      
      function contains {
          local item="$1"
          shift
          local list=("$@")
          
          for element in "${list[@]}"; do
              if [[ "$element" == "$item" ]]; then
                  return 0
              fi
          done
          return 1
      }
      
      function cancel_scan {
          local scan_id="$1"
          
          response=$(curl -s -X POST \
              -H "$HEADER_CONTENT" \
              -H "$HEADER_ACCEPT" \
              -H "$HEADER_AUTH" \
              "$API_ENDPOINT/scans/$scan_id/abort")
          
          # Extract status code from response
          status_code=$(get_json_value "$response" "status_code")
          if [ -z "$status_code" ]; then
              status_code=$(get_json_value "$response" "status")
          fi
          if [ -z "$status_code" ]; then
              status_code=200 # Assume success if no status found
          fi
          
          if [[ "$status_code" == "409" ]]; then
              echo "Scan $scan_id already stopped: $status_code"
          elif [[ "$status_code" != "200" ]]; then
              echo "Scan $scan_id error stopping: $status_code"
          fi
      }
      
      function check_conditions {
          local response="$1"
          
          # Count vulnerabilities by counting occurrences of "vt_name"
          vulnerabilities_count=$(echo "$response" | grep -o '"vt_name":' | wc -l)
          
          if [[ "$vulnerabilities_count" -eq 0 ]]; then
              echo "No vulnerabilities found."
              exit 0
          fi
          
          EXIT_CODE=0
          
          # Extract vulnerabilities section
          vuln_section=$(echo "$response" | sed -n '/"vulnerabilities": \[/,/\],/p')
          
          # Process each vulnerability
          while IFS= read -r line; do
              if [[ "$line" == *"vt_name"* ]]; then
                  # Reset current vulnerability
                  current_vuln=""
              fi
              current_vuln+="$line"
              
              if [[ "$line" == *"}"* ]]; then
                  # Extract fields from current vulnerability
                  severity=$(get_json_value "$current_vuln" "severity")
                  confidence=$(get_json_value "$current_vuln" "confidence")
                  status=$(get_json_value "$current_vuln" "status")
                  vt_name=$(get_json_value "$current_vuln" "vt_name")
                  
                  # Check if severity matches FAIL_ON_SEVERITY
                  severity_fail=0
                  if [[ "$severity" == "$FAIL_ON_SEVERITY" ]]; then
                      severity_fail=1
                  fi
                  
                  # Check if confidence is 100 and FAIL_ON_CONFIDENCE_FULL is true
                  confidence_fail=0
                  if [[ "$confidence" -eq 100 ]] && [[ "$FAIL_ON_CONFIDENCE_FULL" == "true" ]]; then
                      confidence_fail=1
                  fi
                  
                  if [[ "$severity_fail" -eq 1 ]] || [[ "$confidence_fail" -eq 1 ]]; then
                      # Check if we should ignore based on status
                      if { [[ "$status" == "ignored" ]] && [[ "$IGNORE_IF_STATUS_IGNORED" == "true" ]]; } || \
                         { [[ "$status" == "false_positive" ]] && [[ "$IGNORE_IF_STATUS_FALSE_POSITIVE" == "true" ]]; }; then
                          continue
                      fi
                      
                      # If we got here, we need to fail
                      echo "Failed check: $vt_name (Severity: $severity, Confidence: $confidence, Status: $status)"
                      if [[ "$STOP_SCANING_IF_THE_BUILD_FAILS" == "true" ]]; then
                          cancel_scan "$SCAN_ID"
                      fi
                      EXIT_CODE=1
                  fi
                  
                  # fail fast
                  if [[ "$EXIT_CODE" -eq 1 ]]; then
                      break
                  fi
              fi
          done < <(echo "$vuln_section" | sed '1d;$d')
          
          exit $EXIT_CODE
      }
      
      function write_scan_status {
          local status="$1"
          local attempt="$2"
          local max_attempts="$3"
          
          if [[ -z "$status" ]]; then
              status="unknown"
          fi
          
          case $(echo "$status" | tr '[:upper:]' '[:lower:]') in
              "completed") color="\033[0;32m" ;;
              "failed") color="\033[0;31m" ;;
              "aborting") color="\033[0;33m" ;;
              "processing"|"queued"|"starting") color="\033[0;36m" ;;
              *) color="\033[0;37m" ;;
          esac
          
          echo -e "\nScan Status: ${color}${status}\033[0m"
          echo "Attempt: $attempt"
          echo "--------------------------------------------------"
      }
      
      # Stop any running scans
      if [[ "$STOP_SCAN_BEFORE_START" == "true" ]]; then
          echo "Stopping any running scans on this target before starting a new one"
          
          url="$API_ENDPOINT/scans?q=target_id:$TARGET_ID;status:processing,queued,starting"
          
          response=$(curl -s -X GET \
              -H "$HEADER_CONTENT" \
              -H "$HEADER_ACCEPT" \
              -H "$HEADER_AUTH" \
              "$url")
          
          # Extract scans array
          scans_section=$(echo "$response" | sed -n '/"scans": \[/,/\],/p')
          
          if [[ -n "$scans_section" ]]; then
              # Process each scan
              while IFS= read -r line; do
                  if [[ "$line" == *"scan_id"* ]]; then
                      scan_id=$(get_json_value "$line" "scan_id")
                      echo "Stopping scan $scan_id"
                      cancel_scan "$scan_id"
                  fi
              done < <(echo "$scans_section" | sed '1d;$d')
          else
              echo "No active scan found."
          fi
      fi
      
      # Start the scan
      echo "Starting scan..."
      RESPONSE=$(curl -s -X POST \
          -H "$HEADER_CONTENT" \
          -H "$HEADER_ACCEPT" \
          -H "$HEADER_AUTH" \
          -d "$BODY" \
          "$API_ENDPOINT/scans")
      
      # Extract scan ID
      SCAN_ID=$(get_json_value "$RESPONSE" "scan_id")
      sleep 5
      
      # Poll for completion
      echo "Polling for completion..."
      for ((i=1; i<=MAX_POLL_ATTEMPTS; i++)); do
          response=$(curl -s -X GET \
              -H "$HEADER_CONTENT" \
              -H "$HEADER_ACCEPT" \
              -H "$HEADER_AUTH" \
              "$API_ENDPOINT/scans/$SCAN_ID/results")
          
          if [[ -z "$response" ]]; then
              echo "Error: No response received from API" >&2
              exit 1
          fi
          
          # Get the first result's status and ID
          results_section=$(echo "$response" | sed -n '/"results": \[/,/\],/p')
          if [[ -n "$results_section" ]]; then
              first_result=$(echo "$results_section" | sed '1d;$d' | head -n 20 | tr -d '\n')
              status=$(get_json_value "$first_result" "status")
              result_id=$(get_json_value "$first_result" "result_id")
          else
              status="unknown"
              result_id=""
          fi
          
          write_scan_status "$status" "$i" "$MAX_POLL_ATTEMPTS"
          
          if [[ "$status" == "aborted" ]]; then
              echo "Invicti CI/CD integration script done"
              exit 1
          fi
          
          if [[ "$status" == "completed" ]]; then
              echo "Scan completed successfully"
              # Get scan results
              response=$(curl -s -X GET \
                  -H "$HEADER_CONTENT" \
                  -H "$HEADER_ACCEPT" \
                  -H "$HEADER_AUTH" \
                  "$API_ENDPOINT/scans/$SCAN_ID/results/$result_id/vulnerabilities")
              
              if [[ "$FAIL_BUILD_ON_CONDITIONS" == "true" ]] && [[ "$FAIL_BUILD_BUT_AFTER_SCAN_HAS_COMPLATED" == "true" ]]; then
                  cancel_scan "$SCAN_ID"
              fi
              
              # Fail upon certain conditions
              if [[ "$FAIL_BUILD_ON_CONDITIONS" == "true" ]]; then
                  check_conditions "$response"
              fi
              
              exit 0
          elif [[ "$status" == "failed" ]] || [[ "$status" == "aborting" ]]; then
              echo "Scan $status" >&2
              exit 1
          fi
          
          sleep "$POLL_INTERVAL"
      done
      
      echo "Invicti CI/CD integration script done"